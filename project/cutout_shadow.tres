[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix, depth_test_disable, cull_back, unshaded, shadows_disabled;

uniform vec4 base_color:hint_color;
uniform vec2 near_far=vec2(0.1,100.0);
uniform float inval=0.0;
uniform float match=0.0;

float linearize(float val) {
    val = 2.0 * val - 1.0;
    return val;
}

void fragment() {
	float zdepth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	float zpos = FRAGCOORD.z;
	float diff = zdepth - zpos;
	diff *= 1000.0;
	float sub = 0.0;
	float top = 0.0;
	if (diff >0.0) {
		sub = diff;
		top = diff;
	}
	
	if(top > 1.0){
		top = 1.0;
	}
	
	sub = (1.0-sub)*2.0;
	if(sub != 2.0){
		sub = 0.0;
	}
	if(sub < 0.0){
		sub = 0.0;
	}
	
	//float final = sub*2.0+2.0;
	float final = top*1.0;
	
	NORMAL*=-1.0;
	ALBEDO = base_color.rgb;
	//ALPHA = -0.5*2.0;
	ALPHA = sub*-inval*base_color.a;
}"

[resource]
shader = SubResource( 1 )
shader_param/base_color = Color( 0, 0, 0, 0.5 )
shader_param/near_far = Vector2( 0.1, 100 )
shader_param/inval = 1.0
shader_param/match = 0.0
